const express = require('express');
const axios = require('axios');
const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
require('dotenv').config();

const app = express();
app.use(express.json());

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-lite",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

async function run() {
  const chatSession = model.startChat({
    generationConfig,
    history: [
      // Add previous messages here if needed
    ],
  });

  // Replace "INSERT_INPUT_HERE" with your actual input
  const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
  
  // Ensure this is the correct way to access the response text
  console.log(result.response.text());
}

app.post('/generateSummary', async (req, res) => {
    const { name, email, transcript } = req.body;

    // Use Gemini API to generate the executive summary
    const geminiPrompt = `
    Generate a professional executive summary for the following meeting transcript.
    The summary should:
    - Highlight key pain points
    - Provide actionable solutions
    - Suggest next steps
    - Use concise and professional language
    
    Transcript: ${transcript}
    `;

    try {
        const response = await axios.post(
            'https://api.aistudio.google.com/v1/gemini/generateText',
            {
                model: "gemini-pro",
                prompt: geminiPrompt,
                max_tokens: 1000
            },
            {
                headers: {
                    Authorization: `Bearer YOUR_GEMINI_API_KEY`,
                    'Content-Type': 'application/json'
                }
            }
        );

        const summary = response.data.choices[0].text.trim();

        // Send the summary back to Google Apps Script
        res.json({ summary });
    } catch (error) {
        console.error("Error generating summary:", error);
        res.status(500).json({ error: "Error generating summary" });
    }
});

// Self-invoking function to test the /generateSummary endpoint
(async function testGenerateSummary() {
    try {
        const response = await axios.post('http://localhost:3000/generateSummary', {
            name: "John Doe",
            email: "john.doe@example.com",
            transcript: "In today's meeting, we discussed the upcoming project deadlines and the need for additional resources."
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        });

        console.log("Summary generated by the API:", response.data.summary);
    } catch (error) {
        console.error("Error during test:", error.response ? error.response.data : error.message);
    }
})();

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

run();